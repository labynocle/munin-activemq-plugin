#!/usr/bin/perl
# -*- perl -*-

=head1 NAME

Plugin to monitor queue activities in ActiveMQ

=head1 CONFIGURATION

No configuration

=head2 Warning and Critical Values

Warning and critical values not supported for this version.

=head2 ENVIRONMENT

This plugin needs to retrieve some datas from your ActiveMQ server,
So, You should define ActiveMQ parameters by changing  environment variables:

[queue_*]
        env.host        <ActiveMQ_@IP>
        env.port        <ActiveMQ_Port>
        env.category	<some name>

# To monitor dequeueCount,enqueueCount and the size of my.message.queue:
# [queue_my.message.queue]
#       env.host        127.0.0.1
#       env.port        8161
#       env.category	my_pretty_name

# To monitor the size of my.message.queue:
# [queue_my.message.queue--size]
#       env.host        127.0.0.1
#       env.port        8161
#       env.category	my_pretty_name


=head1 AUTHORS

Author: Antelink (Othmane Erraoui and little fix by Erwan 'Labynocle' Ben Souiden)

=head1 LICENSE

GNU General Public License 2.0

=head1 MAGIC MARKERS

#%# family=auto
#%# capabilities=autoconf

=head1 VERSION

Ver 1.1

=cut


use strict;
use WWW::Mechanize;
use XML::Simple;
 
my $HOST        = exists $ENV{'host'} ? $ENV{'host'} : 'localhost';
my $PORT        = exists $ENV{'port'} ? $ENV{'port'} : 8161;
my $CATEGORY    = exists $ENV{'category'} ? $ENV{'category'} : 'Activemq-queues';
 
my $URI = "http://$HOST:$PORT/admin/xml/queues.jsp";

##
# Main
##

check_autoconf();

my ($queue_name,$queue_display);
 
# determine the queue name and what you want to display
if ($0 =~ /queue_(.+)*--(.+)*$/){
	$queue_name = $1;
	$queue_display = $2;
}
elsif ($0 =~ /queue_(.+)*$/){
	$queue_name = $1;
}
else {
	# nothing
}
defined($queue_name) || exit 2;

check_config($CATEGORY, $URI, $queue_name,$queue_display);
get_values($URI, $queue_name,$queue_display);
 
##
# Subroutines
##
 
sub check_autoconf(){
    if (exists $ARGV[0] and $ARGV[0] eq 'autoconf' ){
        if (! eval "require WWW::Mechanize" ){
            print "no (WWW::Mechanize not found)\n";
            exit 1;
        }
        if (! eval "require XML::Simple" ){
            print "no (XML::Simple not found)\n";
            exit 1;
        }
        print "yes\n";
        exit 0;
    }
}

# Build a variable according to specific environment
# This Variable contains all Munin specific fields
# Will be used to output Munin config
sub get_vars{
    my ($key, $cat,$todisplay) = @_;
    $todisplay=" - $todisplay" if ($todisplay);
    my %ret = {};
    if ( defined($key) ){
        %ret =( $key => {
                master => {
                    graph_title => " ActiveMQ queue: $key"."$todisplay",
                    graph_args => "--base 1000",
                    graph_vlabel => 'Messages',
                    graph_category => "$cat"
                },
                dequeueCount => {
                    label => "Ack successfull",
                    type => "GAUGE",
                    draw => 'LINE2',
                    info => "The number of messages that have been successfully (i.e., they have been acknowledged from the consumer) read off the queue over the lifetime of the queue."
                },
                enqueueCount => {
                    label => "Total Messages",
                    type => "GAUGE",
                    draw => 'LINE2',
                    info => "The number of messages that have been written to the queue over the lifetime of the queue."
                },
                size => {
                    label => "Size of the queue",
                    type => "GAUGE",
                    draw => 'LINE2',
                    info => "The size of the queue."
                }
            });
    }
    return %ret;
}
 
# Read a variable builded by "get_vars" and format the OUTPUT
# In order to tell Munin what it has to do.
sub check_config{
    my ($category, $uri, $name, $todisplay) = @_;
    if (exists $ARGV[0] and $ARGV[0] eq 'config' ){
         
        # get the tree of values from activemq
        # this tree will be like:
        # queues
        #    \_ queue
        #       \_ <queue_name_1>
        #       |   \_ 'feed'
        #       |   |   \_ 'atom' = feed_value1
        #       |   |   |
        #       |   |   \_ 'rss' = feed_value2
        #       |   \_ 'stats'
        #       |       \_ consumerCount = value
        #       |       |
        #       |       \_ dequeueCount = value
        #       |       |
        #       |       \_ enqueueCount = value
        #       |       |
        #       |       \_ size = value
        #       \_ <queue_name_2>
        #       |   \_ 'feed'
        #       |   |   \_ 'atom' = feed_value1
        #       |   |   |
        #       |   |   \_ 'rss' = feed_value2
        #       |   \_ 'stats'
        #  .... etc
 
        my $tree = fetch($uri);
        my %vars = {};
 
        # here we retrieve all sub tree <queue_name_*>
        # so the keys will equal = queue_name1, queu_name_2,... etc

        foreach my $key ( keys %{$tree->{queues}->{queue}} ){
            # from the template, fill the vars hash
            # if empty don't join, just put in!
            if (keys %vars){
                # join hashs
                my %newvars = ( %vars , get_vars($key, $category,$todisplay) );
                %vars = %newvars;
            }
            else{
                %vars = get_var($key, $category);
            }
        }
 
        # select from all <queue_name_*> sub tree the one we want
        # by $name variable.
        # and for the master <=> Munin main parameters
 
        my %v = %{$vars{$name}{'master'}};
        foreach my $k ( keys %v ){
            print "$k ".$v{$k}."\n";
        }
        print 'graph_order ';
         
        # sub_vars contains munin parameters sub tree of the queue we select.
        my %sub_vars = %{$vars{$name}};
 
        # keys == {'master', 'enqueuCount', ..etc}
	# finish to construct graph_order by listing the displayed values
        foreach my $k ( sort(keys %sub_vars) ) {
             if(($k eq 'master') or (($k ne $todisplay) and ($todisplay ne ''))) { next; }
             print $k." ";
        }
         
        # here we display something like -- only if there no specific display (cf $todisplay):
        #  graph_title  ActiveMQ queue: antepedia.online.waitQueue
        #  graph_vlabel Messages
        #  graph_args --base 1000
        #  graph_category Activemq-queues
        #  graph_order dequeueCount enqueueCount size

        # if 'size' is specified
        #  graph_title  ActiveMQ queue: antepedia.online.waitQueue
        #  graph_vlabel Messages
        #  graph_args --base 1000
        #  graph_category Activemq-queues
        #  graph_order size
         
        print "\n";
         
        # for each queue_name_ display graph parameters
        foreach my $k ( sort(keys %sub_vars) ) {
            if(($k eq 'master') or (($k ne $todisplay) and ($todisplay ne ''))) { next; }
            my %v = %{$sub_vars{$k}};
            foreach my $k2 (keys %v) {
                print "$k.$k2 ".$v{"$k2"}."\n";
            }
        }
 
        # here we display something like -- only if there no specific display (cf $todisplay):
        #  dequeueCount.info The number of messages that have been successfully (i.e., they have been acknowledged from the consumer) read off the queue over ....
        #  dequeueCount.draw LINE2
        #  dequeueCount.label Ack successfull
        #  dequeueCount.type GAUGE
        #  enqueueCount.info The number of messages that have been written to the queue over the lifetime of the queue.
        #  enqueueCount.draw LINE2
        #  enqueueCount.label Total Messages
        #  enqueueCount.type GAUGE
        #  size.info The size of the queue.
        #  size.draw LINE2
        #  size.label Size of the queue
        #  size.type GAUGE

	# if 'size' is specified
        #  size.info The size of the queue.
        #  size.draw LINE2
        #  size.label Size of the queue
        #  size.type GAUGE
 
        exit 0;
    }
}
 
# Gives Munin the values of the fields defined in "check_config"
sub get_values{
    my ($uri,$name,$todisplay) = @_;
    my $tree = fetch( $uri );
    my $vars = $tree->{queues}->{queue}->{$name}->{stats};
    foreach my $k (keys %{$vars} ){
        if ( $k eq 'consumerCount' ){next;}
        #print "$k.value $vars->{$k}\n";
	print "$k.value $vars->{$k}\n" if (($k eq $todisplay) or ($todisplay eq ''));
    }
}
 
#Download the RSS of Queue States and convert to XML
sub fetch{
    my $uri = @_[0];
    my $mech = WWW::Mechanize->new();
    my $parser = new XML::Simple( KeepRoot => 1 );
    $mech->get($uri);
    return $parser->XMLin( $mech->content( format => 'xml' ) );
}
